[{"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\index.js":"1","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\App.js":"2","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\CompleteDetails.js":"3","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Login.js":"4","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\UpdateProfile.js":"5","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PrivateRoute.js":"6","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\InnerCompleteDetails.js":"7","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ForgotPassword.js":"8","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Signup.js":"9","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PublicRoute.js":"10","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Dashboard.js":"11","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ProjectPage.js":"12","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Context\\AuthContext.js":"13","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\firebase.js":"14","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\NavBar.js":"15","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\SideBar.js":"16","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProject.js":"17","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ContractsPage.js":"18","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ContactsPage.js":"19","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\NPV.js":"20","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\Inventory.js":"21","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\useLocalStorage.js":"22","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\popUptask.js":"23","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProducts.js":"24","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\CurrentWork.js":"25","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\LineChart.js":"26","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpNote.js":"27","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpAddEmployee.js":"28","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpClients.js":"29","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpEmail.js":"30","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\GanttChart.js":"31","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpTaskDetails.js":"32","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProductDetails.js":"33","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Calendar.js":"34","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\CalendarScheduler.js":"35","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\ProjectUsers.js":"36","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\ProjectSettings.js":"37"},{"size":256,"mtime":1612094176311,"results":"38","hashOfConfig":"39"},{"size":1875,"mtime":1616586700644,"results":"40","hashOfConfig":"39"},{"size":1998,"mtime":1616586700644,"results":"41","hashOfConfig":"39"},{"size":3492,"mtime":1616327419659,"results":"42","hashOfConfig":"39"},{"size":2716,"mtime":1612094699824,"results":"43","hashOfConfig":"39"},{"size":1584,"mtime":1616252912025,"results":"44","hashOfConfig":"39"},{"size":3680,"mtime":1616071952953,"results":"45","hashOfConfig":"39"},{"size":2286,"mtime":1616104750285,"results":"46","hashOfConfig":"39"},{"size":4946,"mtime":1616104750286,"results":"47","hashOfConfig":"39"},{"size":3508,"mtime":1613784739398,"results":"48","hashOfConfig":"39"},{"size":2565,"mtime":1616586700646,"results":"49","hashOfConfig":"39"},{"size":1520,"mtime":1616845270153,"results":"50","hashOfConfig":"39"},{"size":30209,"mtime":1616845270154,"results":"51","hashOfConfig":"39"},{"size":683,"mtime":1616071953015,"results":"52","hashOfConfig":"39"},{"size":8520,"mtime":1616836858348,"results":"53","hashOfConfig":"39"},{"size":5513,"mtime":1616586700650,"results":"54","hashOfConfig":"39"},{"size":3769,"mtime":1616766920279,"results":"55","hashOfConfig":"39"},{"size":4546,"mtime":1616586700645,"results":"56","hashOfConfig":"39"},{"size":4474,"mtime":1616845270152,"results":"57","hashOfConfig":"39"},{"size":5292,"mtime":1616586700650,"results":"58","hashOfConfig":"39"},{"size":9567,"mtime":1616589444954,"results":"59","hashOfConfig":"39"},{"size":1300,"mtime":1614526491138,"results":"60","hashOfConfig":"39"},{"size":6586,"mtime":1616766992323,"results":"61","hashOfConfig":"39"},{"size":3715,"mtime":1616766872016,"results":"62","hashOfConfig":"39"},{"size":10699,"mtime":1616845270153,"results":"63","hashOfConfig":"39"},{"size":3081,"mtime":1616846490262,"results":"64","hashOfConfig":"39"},{"size":1893,"mtime":1616767051822,"results":"65","hashOfConfig":"39"},{"size":7391,"mtime":1616836858349,"results":"66","hashOfConfig":"39"},{"size":2240,"mtime":1616836858349,"results":"67","hashOfConfig":"39"},{"size":3615,"mtime":1616836858350,"results":"68","hashOfConfig":"39"},{"size":2076,"mtime":1616361991847,"results":"69","hashOfConfig":"39"},{"size":16633,"mtime":1616846354535,"results":"70","hashOfConfig":"39"},{"size":3836,"mtime":1616767020650,"results":"71","hashOfConfig":"39"},{"size":2047,"mtime":1616589444951,"results":"72","hashOfConfig":"39"},{"size":3838,"mtime":1616836858347,"results":"73","hashOfConfig":"39"},{"size":145,"mtime":1616845270154,"results":"74","hashOfConfig":"39"},{"size":151,"mtime":1616845270153,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1be21fc",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"78"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"78"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\index.js",[],["154","155"],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\App.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\CompleteDetails.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Login.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\UpdateProfile.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PrivateRoute.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\InnerCompleteDetails.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ForgotPassword.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Signup.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PublicRoute.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Dashboard.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ProjectPage.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Context\\AuthContext.js",["156"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { auth, db, provider } from \"../firebase\";\r\nimport { format } from \"date-fns\";\r\nimport useLocalStorage from \"../Components/useLocalStorage.js\";\r\nimport emailJS from \"emailjs-com\";\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState();\r\n  const [userDetails, setUserDetails] = useLocalStorage(\"userDetails\", []);\r\n  const [loading, setLoading] = useState(true);\r\n  const [projects, setProjects] = useLocalStorage(\"CompanyProjects\", []);\r\n  const [selectedCompanyEmployee, setSelectedCompanyEmployee] = useLocalStorage(\r\n    \"selectedCompanyEmployee\",\r\n    {}\r\n  );\r\n  const [selectedCompanyClients, setSelectedCompanyClients] = useLocalStorage(\r\n    \"selectedCompanyClients\",\r\n    {}\r\n  );\r\n  const [selectedProject, setSelectedProject] = useLocalStorage(\r\n    \"selectedProject\",\r\n    {}\r\n  );\r\n  const [selectedProjectTasks, setSelectedProjectTasks] = useLocalStorage(\r\n    \"selectedProjectTasks\",\r\n    {}\r\n  );\r\n  const [companiesData, setCompaniesData] = useLocalStorage(\r\n    \"companiesData\",\r\n    {}\r\n  );\r\n  const [selectCompany, setSelectCompany] = useLocalStorage(\r\n    \"selectedCompany\",\r\n    {}\r\n  );\r\n  const [userNotifications, setUserNotifications] = useLocalStorage(\r\n    \"notifications\",\r\n    {}\r\n  );\r\n  const [selectedProjectNotes, setSelectedProjectNotes] = useLocalStorage(\r\n    \"selectedProjectNotes\",\r\n    {}\r\n  );\r\n  const [\r\n    selectedProjectInventory,\r\n    setSelectedProjectInventory,\r\n  ] = useLocalStorage(\"selectedProjectInventory\", {});\r\n\r\n  function signup(email, password) {\r\n    return auth.createUserWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  function login(email, password) {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem(\"userDetails\");\r\n    localStorage.removeItem(\"CompanyProjects\");\r\n    localStorage.removeItem(\"companiesData\");\r\n    localStorage.removeItem(\"selectedCompany\");\r\n    localStorage.removeItem(\"selectedProject\");\r\n    localStorage.removeItem(\"selectedProjectTasks\");\r\n    localStorage.removeItem(\"notifications\");\r\n    localStorage.removeItem(\"selectedProjectNotes\");\r\n    localStorage.removeItem(\"selectedProjectInventory\");\r\n    localStorage.removeItem(\"selectedCompanyEmployee\");\r\n    localStorage.removeItem(\"selectedCompanyClients\");\r\n\r\n    return auth.signOut();\r\n  }\r\n\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email);\r\n  }\r\n\r\n  function updateEmail(email) {\r\n    return auth.currentUser.updateEmail(email);\r\n  }\r\n\r\n  function updatePassword(password) {\r\n    return auth.currentUser.updatePassword(password);\r\n  }\r\n\r\n  async function setSelectedCompany(company) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(\"\" + company.id)\r\n        .onSnapshot((querySnapshot) => {\r\n          console.log(querySnapshot.data());\r\n          console.log(\"company changed\");\r\n          setSelectCompany(querySnapshot.data());\r\n\r\n          getCompanyProjects(querySnapshot.data().id);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function initialGetCompanies() {\r\n    let items = [];\r\n    let comp = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((company) => {\r\n            let item = company.data();\r\n            item.id = company.id;\r\n            company.data().users.forEach((user) => {\r\n              if (user.email === auth.currentUser.email) {\r\n                items.push(item);\r\n                console.log(user.email);\r\n              }\r\n            });\r\n          });\r\n        });\r\n      // comp.forEach((company) => {\r\n      //   db.collection(\"Companies\")\r\n      //     .doc(company.id)\r\n      //     .collection(\"Employee\")\r\n      //     .get()\r\n      //     .then((res) => {\r\n      //       console.log(res.data());\r\n      //       res.forEach((emp) => {\r\n      //         if (auth.currentUser.email === emp.data().EmployeeEmail) {\r\n      //           console.log(\"true\");\r\n      //           items.push(company.data());\r\n      //         }\r\n      //       });\r\n      //     });\r\n      // });\r\n\r\n      console.log(items);\r\n\r\n      setCompaniesData(items);\r\n      setSelectedCompany(items[0]);\r\n      await getCompanyProjects(items[0].id);\r\n\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function getCompanies() {\r\n    let items = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((doc) => {\r\n            doc.data().users.forEach((user) => {\r\n              if (user.email === auth.currentUser.email) {\r\n                console.log(user.email);\r\n                items.push(doc.data());\r\n              }\r\n            });\r\n          });\r\n        });\r\n\r\n      setCompaniesData(items);\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function getCompanyProjects(id) {\r\n    console.log(\"getCompanyProjects\");\r\n\r\n    if (auth.currentUser) {\r\n      db.collection(\"Companies/\" + id + \"/Projects\").onSnapshot((temp) => {\r\n        const items = [];\r\n        temp.forEach((doc) => {\r\n          items.push(doc.data());\r\n        });\r\n        setProjects(items);\r\n      });\r\n\r\n      GetEmployee(id);\r\n      GetClients(id);\r\n    }\r\n  }\r\n\r\n  async function initialGetCompanyProjects() {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies/\" + selectCompany.id + \"/Projects\")\r\n        .onSnapshot((temp) => {\r\n          const items = [];\r\n          temp.forEach((doc) => {\r\n            items.push(doc.data());\r\n          });\r\n          setProjects(items);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function insertProjectToFirestore(\r\n    projectName,\r\n    startDate,\r\n    endDate,\r\n    description\r\n  ) {\r\n    companiesData.forEach((company) => {\r\n      if (company.companyName === selectCompany.companyName) {\r\n        company.users.forEach((user) => {\r\n          if (user.email === auth.currentUser.email) {\r\n            if (user.type === \"owner\") {\r\n              db.collection(\"Companies/\" + selectCompany.id + \"/Projects\")\r\n                .doc(\"\" + projectName)\r\n                .set({\r\n                  companyName: selectCompany.companyName,\r\n                  id: selectCompany.id,\r\n                  uid: \"\" + auth.currentUser.uid,\r\n                  email: \"\" + auth.currentUser.email,\r\n                  projectName: \"\" + projectName,\r\n                  startDate: \"\" + startDate,\r\n                  endDate: \"\" + endDate,\r\n                  description: \"\" + description,\r\n                  assigned: [],\r\n                })\r\n                .then(function () {\r\n                  console.log(\"Document successfully written!\");\r\n                })\r\n                .catch(function (error) {\r\n                  console.error(\"Error writing document: \", error);\r\n                });\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n    await updateDetails();\r\n  }\r\n\r\n  async function insertTaskToFirestore(\r\n    taskName,\r\n    taskDescripiton,\r\n    startDate,\r\n    endDate,\r\n    subTasks\r\n  ) {\r\n    if (auth.currentUser) {\r\n      await db;\r\n      db.collection(\"Companies\")\r\n        .doc(\"\" + selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(\"\" + selectedProject.projectName)\r\n        .collection(\"Tasks\")\r\n        .doc(\"\" + taskName)\r\n        .set({\r\n          taskName: taskName,\r\n          taskDescripiton: taskDescripiton,\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n          complete: false,\r\n          subTasks: subTasks,\r\n        })\r\n        .then(() => {\r\n          console.log(\"task written succesfully\");\r\n          getProjectTasks(selectedProject);\r\n        })\r\n        .catch((e) => {\r\n          console.error(e.message);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function deleteTask(task) {\r\n    if (auth.currentUser) {\r\n      await db;\r\n      db.collection(\"Companies\")\r\n        .doc(\"\" + selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(\"\" + selectedProject.projectName)\r\n        .collection(\"Tasks\")\r\n        .doc(\"\" + task.taskName)\r\n        .delete()\r\n        .then(() => {\r\n          console.log(\"task written succesfully\");\r\n          getProjectTasks(selectedProject);\r\n        })\r\n        .catch((e) => {\r\n          console.error(e.message);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function getProjectTasks(project) {\r\n    let items = [];\r\n    if (auth.currentUser && project) {\r\n      items = [];\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(project.projectName)\r\n        .collection(\"Tasks\")\r\n        .onSnapshot((querySnapshot) => {\r\n          querySnapshot.forEach((task) => {\r\n            items.push(task.data());\r\n          });\r\n          setSelectedProjectTasks(items);\r\n          items = [];\r\n        });\r\n\r\n      items = [];\r\n    }\r\n    setLoading(false);\r\n  }\r\n\r\n  async function handleSubTaskChange(task) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(selectedProject.projectName)\r\n        .collection(\"Tasks\")\r\n        .doc(task.taskName)\r\n        .set(task)\r\n        .then(() => {\r\n          console.log(\"subtask succesfully edited\");\r\n          getProjectTasks(selectedProject);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function insertNoteToFirestore(msg) {\r\n    if (auth.currentUser) {\r\n      let date = format(new Date(), \"MMM-dd HH:m\");\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(selectedProject.projectName)\r\n        .collection(\"Notes\")\r\n        .doc()\r\n        .set({\r\n          msg: msg,\r\n          dateOfCreation: date,\r\n          creator: {\r\n            name: auth.currentUser.displayName,\r\n            uid: auth.currentUser.uid,\r\n            email: auth.currentUser.email,\r\n            photoURL: auth.currentUser.photoURL,\r\n          },\r\n        });\r\n      getProjectNotes(selectedProject);\r\n    }\r\n  }\r\n\r\n  async function getProjectNotes(project) {\r\n    let items = [];\r\n    if (auth.currentUser && project) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(project.projectName)\r\n        .collection(\"Notes\")\r\n        .onSnapshot((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedProjectNotes(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function insertProductToFirestore(\r\n    name,\r\n    price,\r\n    sellingPrice,\r\n    quantity,\r\n    unitsSold\r\n  ) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(selectedProject.projectName)\r\n        .collection(\"Inventory\")\r\n        .doc()\r\n        .set({\r\n          productName: name,\r\n          productPrice: price,\r\n          productSellingPrice: sellingPrice,\r\n          productQuantity: quantity,\r\n          productUnitsSold: unitsSold,\r\n        });\r\n      getProjectInventory(selectedProject);\r\n    }\r\n  }\r\n\r\n  async function deleteProduct(prod) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(selectedProject.projectName)\r\n        .collection(\"Inventory\")\r\n        .doc(prod.id)\r\n        .delete();\r\n      getProjectInventory(selectedProject);\r\n    }\r\n  }\r\n\r\n  async function updateProduct(\r\n    prodId,\r\n    name,\r\n    quantity,\r\n    price,\r\n    sellingPrice,\r\n    units\r\n  ) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(selectedProject.projectName)\r\n        .collection(\"Inventory\")\r\n        .doc(prodId)\r\n        .set({\r\n          productName: name,\r\n          productPrice: price,\r\n          productSellingPrice: sellingPrice,\r\n          productQuantity: quantity,\r\n          productUnitsSold: units,\r\n        });\r\n      getProjectInventory(selectedProject);\r\n    }\r\n  }\r\n\r\n  async function getProjectInventory(project) {\r\n    let items = [];\r\n    if (auth.currentUser && project) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Projects\")\r\n        .doc(project.projectName)\r\n        .collection(\"Inventory\")\r\n        .onSnapshot((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedProjectInventory(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  function sortInventory(temp) {\r\n    setSelectedProjectInventory(temp);\r\n  }\r\n\r\n  async function updateProfile(firstName, lastName) {\r\n    await auth.currentUser\r\n      .updateProfile({\r\n        displayName: firstName + \" \" + lastName,\r\n      })\r\n      .then(function () {\r\n        console.log(\"success\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"failed\");\r\n      });\r\n  }\r\n\r\n  async function insertDetailsToFirestore(\r\n    firstName,\r\n    lastName,\r\n    phone,\r\n    companyName\r\n  ) {\r\n    var details = {\r\n      email: \"\" + auth.currentUser.email,\r\n      firstName: \"\" + firstName,\r\n      lastName: \"\" + lastName,\r\n      phone: \"\" + phone,\r\n      companyName: companyName,\r\n      uid: \"\" + auth.currentUser.uid,\r\n    };\r\n\r\n    await db\r\n      .collection(\"Users\")\r\n      .doc(\"\" + auth.currentUser.email)\r\n      .set(details)\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n\r\n    await insertCompanyToFirestore(companyName[0]);\r\n    await initialUpdateDetails();\r\n  }\r\n\r\n  async function initialUpdateDetails() {\r\n    setLoading(true);\r\n    await fetchUserDetails();\r\n    await getUserNotifications();\r\n    await initialGetCompanies();\r\n    await initialGetCompanyProjects();\r\n    await initialGetClients();\r\n    await initialGetEmployee();\r\n\r\n    console.log(auth.currentUser);\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  async function updateDetails() {\r\n    await fetchUserDetails;\r\n    await getCompanies();\r\n  }\r\n\r\n  async function insertCompanyToFirestore(companyName) {\r\n    setLoading(true);\r\n    var users = [\r\n      {\r\n        uid: auth.currentUser.uid,\r\n        email: auth.currentUser.email,\r\n        type: \"owner\",\r\n      },\r\n    ];\r\n\r\n    var projects = [];\r\n\r\n    var company = {\r\n      companyName: companyName,\r\n      users: users,\r\n      projects: projects,\r\n    };\r\n\r\n    await db\r\n      .collection(\"Companies\")\r\n      .doc()\r\n      .set(company)\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n\r\n    let items = [];\r\n\r\n    await db\r\n      .collection(\"Companies\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        items = [];\r\n        querySnapshot.forEach((doc) => {\r\n          doc.data().users.forEach((user) => {\r\n            if (\r\n              user.email === auth.currentUser.email &&\r\n              companyName === doc.data().companyName\r\n            ) {\r\n              var item = doc.data();\r\n              item.id = doc.id;\r\n              items.push(item);\r\n            }\r\n          });\r\n        });\r\n      });\r\n\r\n    company.id = items[0].id;\r\n\r\n    await db\r\n      .collection(\"Companies/\")\r\n      .doc(items[0].id)\r\n      .set(company)\r\n      .then(function () {\r\n        console.log(\"Document successfully written!\");\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"Error writing document: \", error);\r\n      });\r\n\r\n    setSelectedCompany(company);\r\n    items = [];\r\n  }\r\n\r\n  async function fetchUserDetails() {\r\n    var details = [];\r\n\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Users\")\r\n        .doc(\"\" + auth.currentUser.email)\r\n        .get()\r\n        .then((doc) => {\r\n          const data = doc.data();\r\n          if (data !== undefined) {\r\n            console.log(\"logged in succesfully with set\");\r\n            details = data;\r\n            console.log(details);\r\n            setUserDetails(details);\r\n            console.log(userDetails);\r\n          } else {\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function checkUserExist() {\r\n    var exists = -1;\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Users\")\r\n        .doc(\"\" + auth.currentUser.email)\r\n        .get()\r\n        .then((doc) => {\r\n          const data = doc.data();\r\n          console.log(data);\r\n          if (data !== undefined) {\r\n            exists = 1;\r\n          } else {\r\n            exists = 0;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  async function checkEmployeeExist(email) {\r\n    var exists = -1;\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Users\")\r\n        .doc(\"\" + email)\r\n        .get()\r\n        .then((doc) => {\r\n          const data = doc.data();\r\n          if (data !== undefined) {\r\n            exists = data;\r\n          } else {\r\n            exists = 0;\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n\r\n    return exists;\r\n  }\r\n\r\n  async function insertClientToFirestore(ClientName, ClientEmail) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies/\" + selectCompany.id + \"/Clients\")\r\n        .doc()\r\n        .set({\r\n          ClientName: ClientName,\r\n          ClientEmail: ClientEmail,\r\n        })\r\n        .then(() => {\r\n          console.log(\"notification succesfully written\");\r\n          GetClients(selectCompany.id);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function insertEmployeeToFirestore(\r\n    EmployeeName,\r\n    EmployeeEmail,\r\n    EmployeeType,\r\n    Projects\r\n  ) {\r\n    if (auth.currentUser) {\r\n      const exists = await checkEmployeeExist(EmployeeEmail);\r\n      console.log(exists);\r\n      if (exists === -1 || exists === 0) {\r\n        let temp = [];\r\n        Projects.forEach((project) => {\r\n          temp.push({ projectName: project.projectName, type: EmployeeType });\r\n        });\r\n        await db\r\n          .collection(\"Companies/\" + selectCompany.id + \"/Employee\")\r\n          .doc()\r\n          .set({\r\n            EmployeeName: EmployeeName,\r\n            EmployeeEmail: EmployeeEmail,\r\n            AssignedProjects: temp,\r\n          })\r\n          .then(() => {\r\n            console.log(\"employee successfuly inserted\");\r\n          });\r\n        GetEmployee(selectCompany.id);\r\n        let name = EmployeeName.split(\" \");\r\n        let user = {\r\n          firstName: name[0],\r\n          lastName: name[1],\r\n          type: EmployeeType,\r\n          email: EmployeeEmail,\r\n        };\r\n        Projects.forEach((project) => {\r\n          project.assigned.push(user);\r\n          db.collection(\"Companies\")\r\n            .doc(selectCompany.id)\r\n            .collection(\"Projects\")\r\n            .doc(project.projectName)\r\n            .set({\r\n              projectName: project.projectName,\r\n              companyName: project.companyName,\r\n              description: project.description,\r\n              uid: project.uid,\r\n              email: project.email,\r\n              id: project.id,\r\n              startDate: project.startDate,\r\n              endDate: project.endDate,\r\n              assigned: project.assigned,\r\n            });\r\n        });\r\n        let names = [];\r\n        Projects.forEach((project) => {\r\n          names.push(project.projectName);\r\n        });\r\n        let variables = {\r\n          msg:\r\n            \"Hello \" +\r\n            EmployeeName +\r\n            \", \\n\\n You have been invited by \" +\r\n            currentUser.displayName +\r\n            \", to work at their company \" +\r\n            selectCompany.companyName +\r\n            \" as a/an \" +\r\n            EmployeeType +\r\n            \" for the following project/s: \" +\r\n            names +\r\n            \".\\n\\nWe have noticed that you do not have an account at EZB Development, to accept the invitation please go to the following link: http://localhost:3000/ and signup\\n\\n Thank you.\\n\\n**PLEASE DO NOT REPLY TO THIS EMAIL\",\r\n          Name: \"EZB Development\",\r\n          Subject: \"Invitation to \" + selectCompany.companyName,\r\n          reciever: EmployeeEmail,\r\n        };\r\n        emailJS\r\n          .send(\r\n            \"Gmail\",\r\n            \"Development_email\",\r\n            variables,\r\n            \"user_Ufgqez1YDtVtHo6gPiYox\"\r\n          )\r\n          .then(\r\n            function (response) {\r\n              console.log(\"SUCCESS!\", response.status, response.text);\r\n            },\r\n            function (error) {\r\n              console.log(\"FAILED...\", error);\r\n            }\r\n          );\r\n      } else {\r\n        let temp = [];\r\n        Projects.forEach((project) => {\r\n          temp.push({ projectName: project.projectName, type: EmployeeType });\r\n        });\r\n        await db\r\n          .collection(\"Companies/\" + selectCompany.id + \"/Employee\")\r\n          .doc()\r\n          .set({\r\n            EmployeeName: exists.firstName + \" \" + exists.lastName,\r\n            EmployeeEmail: EmployeeEmail,\r\n            phone: exists.phone,\r\n            AssignedProjects: temp,\r\n          })\r\n          .then(() => {\r\n            console.log(\"employee successfuly inserted\");\r\n          });\r\n        GetEmployee(selectCompany.id);\r\n\r\n        exists.type = EmployeeType;\r\n        exists.companyName = \"\";\r\n        Projects.forEach((project) => {\r\n          project.assigned.push(exists);\r\n          db.collection(\"Companies\")\r\n            .doc(selectCompany.id)\r\n            .collection(\"Projects\")\r\n            .doc(project.projectName)\r\n            .set({\r\n              projectName: project.projectName,\r\n              companyName: project.companyName,\r\n              description: project.description,\r\n              uid: project.uid,\r\n              email: project.email,\r\n              id: project.id,\r\n              startDate: project.startDate,\r\n              endDate: project.endDate,\r\n              assigned: project.assigned,\r\n            });\r\n        });\r\n        let names = [];\r\n        Projects.forEach((project) => {\r\n          names.push(project.projectName);\r\n        });\r\n        createNotification(\r\n          EmployeeEmail,\r\n          currentUser.displayName +\r\n            \" Have added you to their company \" +\r\n            selectCompany.companyName +\r\n            \" as a \" +\r\n            EmployeeType +\r\n            \" at the following project/s: \" +\r\n            names\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  async function deleteEmployee(email) {\r\n    let temp;\r\n    selectedCompanyEmployee.forEach((employee) => {\r\n      if (email === employee.EmployeeEmail) {\r\n        temp = employee;\r\n      }\r\n    });\r\n\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies/\" + selectCompany.id + \"/Employee\")\r\n        .doc(temp.id)\r\n        .delete();\r\n      GetEmployee(selectCompany.id);\r\n    }\r\n  }\r\n\r\n  async function deleteClient(email) {\r\n    let temp;\r\n    selectedCompanyClients.forEach((client) => {\r\n      if (email === client.ClientEmail) {\r\n        temp = client;\r\n      }\r\n    });\r\n\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Companies/\" + selectCompany.id + \"/Clients\")\r\n        .doc(temp.id)\r\n        .delete();\r\n      GetClients(selectCompany.id);\r\n    }\r\n  }\r\n\r\n  async function GetEmployee(id) {\r\n    let items = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(id)\r\n        .collection(\"Employee\")\r\n\r\n        .onSnapshot((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedCompanyEmployee(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function initialGetEmployee() {\r\n    let items = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Employee\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedCompanyEmployee(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function GetClients(id) {\r\n    let items = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(id)\r\n        .collection(\"Clients\")\r\n\r\n        .onSnapshot((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedCompanyClients(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function initialGetClients() {\r\n    let items = [];\r\n    if (auth.currentUser) {\r\n      items = [];\r\n\r\n      await db\r\n        .collection(\"Companies\")\r\n        .doc(selectCompany.id)\r\n        .collection(\"Clients\")\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          querySnapshot.forEach((note) => {\r\n            let item = note.data();\r\n            item.id = note.id;\r\n            items.push(item);\r\n          });\r\n          setSelectedCompanyClients(items);\r\n          items = [];\r\n        });\r\n      items = [];\r\n    }\r\n    items = [];\r\n  }\r\n\r\n  async function createNotification(email, message) {\r\n    if (auth.currentUser) {\r\n      await db\r\n        .collection(\"Users/\" + email + \"/Notifications\")\r\n        .doc()\r\n        .set({\r\n          message: message,\r\n          creationDate: new Date(),\r\n          read: false,\r\n        })\r\n        .then(() => {\r\n          console.log(\"notification succesfully written\");\r\n        });\r\n    }\r\n  }\r\n\r\n  async function getUserNotifications() {\r\n    if (auth.currentUser) {\r\n      let items = [];\r\n      await db\r\n        .collection(\"Users/\" + auth.currentUser.email + \"/Notifications\")\r\n        .onSnapshot((doc) => {\r\n          items = [];\r\n          doc.forEach((temp) => {\r\n            let item = temp.data();\r\n            item.id = temp.id;\r\n            items.push(item);\r\n          });\r\n          setUserNotifications(items);\r\n        });\r\n    }\r\n  }\r\n\r\n  async function setUserNotificationsRead(items) {\r\n    if (auth.currentUser) {\r\n      await items.forEach((not) => {\r\n        db.collection(\"Users/\" + auth.currentUser.email + \"/Notifications\")\r\n          .doc(not.id)\r\n          .set({\r\n            creationDate: not.creationDate,\r\n            message: not.message,\r\n            read: true,\r\n          });\r\n      });\r\n\r\n      getUserNotifications();\r\n    }\r\n  }\r\n\r\n  function authLogin() {\r\n    return auth\r\n      .signInWithPopup(provider)\r\n      .then((result) => {})\r\n      .catch((error) => {});\r\n  }\r\n\r\n  async function setSelectedProject1(project) {\r\n    setLoading(true);\r\n    localStorage.removeItem(\"selectedProject\");\r\n    localStorage.removeItem(\"selectedProjectTasks\");\r\n    localStorage.removeItem(\"selectedProjectNotes\");\r\n    await setSelectedProject(project);\r\n    getProjectTasks(project);\r\n    getProjectNotes(project);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n      setLoading(false);\r\n    });\r\n\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout,\r\n    resetPassword,\r\n    updateEmail,\r\n    updatePassword,\r\n    authLogin,\r\n    auth,\r\n    checkUserExist,\r\n    updateProfile,\r\n    insertDetailsToFirestore,\r\n    insertProjectToFirestore,\r\n    getCompanyProjects,\r\n    projects,\r\n    selectedProject,\r\n    setSelectedProject1,\r\n    insertCompanyToFirestore,\r\n    fetchUserDetails,\r\n    userDetails,\r\n    companiesData,\r\n    selectCompany,\r\n    setSelectCompany,\r\n    setSelectedCompany,\r\n    updateDetails,\r\n    initialUpdateDetails,\r\n    createNotification,\r\n    userNotifications,\r\n    setUserNotificationsRead,\r\n    insertTaskToFirestore,\r\n    selectedProjectTasks,\r\n    handleSubTaskChange,\r\n    insertNoteToFirestore,\r\n    selectedProjectNotes,\r\n    insertClientToFirestore,\r\n    selectedCompanyClients,\r\n    selectedCompanyEmployee,\r\n    insertEmployeeToFirestore,\r\n    deleteEmployee,\r\n    deleteClient,\r\n    insertProductToFirestore,\r\n    getProjectInventory,\r\n    selectedProjectInventory,\r\n    sortInventory,\r\n    deleteProduct,\r\n    updateProduct,\r\n    deleteTask,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\firebase.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\NavBar.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\SideBar.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProject.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ContractsPage.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\ContactsPage.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\NPV.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\Inventory.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\useLocalStorage.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\popUptask.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProducts.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\CurrentWork.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\LineChart.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpNote.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpAddEmployee.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpClients.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpEmail.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\GanttChart.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpTaskDetails.js",["157"],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\PopUpProductDetails.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Calendar.js",["158"],"import React, { useState } from \"react\";\r\nimport CalenderScheduler from \"./CalendarScheduler.js\";\r\n\r\nexport default function Calendar() {\r\n  const schedulerData = [\r\n    {\r\n      title: \"Website Re-Design Plan\",\r\n      startDate: new Date(2018, 5, 25, 9, 35),\r\n      endDate: new Date(2018, 5, 25, 11, 30),\r\n      id: 0,\r\n      location: \"Room 1\",\r\n      test: \"test1\",\r\n    },\r\n    {\r\n      title: \"Book Flights to San Fran for Sales Trip\",\r\n      startDate: new Date(2018, 5, 25, 12, 11),\r\n      endDate: new Date(2018, 5, 25, 13, 0),\r\n      id: 1,\r\n      location: \"Room 1\",\r\n      test: \"test2\",\r\n    },\r\n    {\r\n      title: \"Install New Router in Dev Room\",\r\n      startDate: new Date(2018, 5, 25, 14, 30),\r\n      endDate: new Date(2018, 5, 25, 15, 35),\r\n      id: 2,\r\n      location: \"Room 2\",\r\n      test: \"test3\",\r\n    },\r\n    {\r\n      title: \"Approve Personal Computer Upgrade Plan\",\r\n      startDate: new Date(2018, 5, 25, 10, 0),\r\n      endDate: new Date(2018, 5, 28, 11, 0),\r\n      id: 3,\r\n      location: \"Room 2\",\r\n      test: \"test4\",\r\n    },\r\n    {\r\n      title: \"Final Budget Review\",\r\n      startDate: new Date(2018, 5, 26, 12, 0),\r\n      endDate: new Date(2018, 5, 26, 13, 35),\r\n      id: 4,\r\n      location: \"Room 2\",\r\n      test: \"test5\",\r\n    },\r\n    {\r\n      title: \"New Brochures\",\r\n      startDate: new Date(2018, 5, 26, 14, 30),\r\n      endDate: new Date(2018, 5, 26, 15, 45),\r\n      id: 5,\r\n      location: \"Room 2\",\r\n      test: \"test6\",\r\n      lol:\"lol\"\r\n    },\r\n    {\r\n      title: \"Install New Database\",\r\n      startDate: new Date(2018, 5, 27, 9, 45),\r\n      endDate: new Date(2018, 5, 27, 11, 15),\r\n      id: 6,\r\n      location: \"Room 1\",\r\n      test: \"test7\",\r\n    },\r\n    {\r\n      title: \"Approve New Online Marketing Strategy\",\r\n      startDate: new Date(2018, 5, 27, 12, 0),\r\n      endDate: new Date(2018, 5, 27, 14, 0),\r\n      id: 7,\r\n      location: \"Room 3\",\r\n      test: \"test8\",\r\n    },\r\n  ];\r\n  return (\r\n    <div>\r\n      <CalenderScheduler data={schedulerData}></CalenderScheduler>\r\n    </div>\r\n  );\r\n}\r\n","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\CalendarScheduler.js",["159"],"import * as React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {\r\n  Scheduler,\r\n  DayView,\r\n  WeekView,\r\n  MonthView,\r\n  Toolbar,\r\n  ViewSwitcher,\r\n  DateNavigator,\r\n  TodayButton,\r\n  Appointments,\r\n  AppointmentTooltip,\r\n} from \"@devexpress/dx-react-scheduler-material-ui\";\r\nimport { ViewState } from \"@devexpress/dx-react-scheduler\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MoreIcon from \"@material-ui/icons/MoreVert\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Room from \"@material-ui/icons/Room\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"clsx\";\r\nimport PopUptask from \"./popUptask.js\";\r\n\r\nconst style = ({ palette }) => ({\r\n  icon: {\r\n    color: palette.action.active,\r\n  },\r\n  textCenter: {\r\n    textAlign: \"center\",\r\n  },\r\n  firstRoom: {\r\n    background:\r\n      \"url(https://js.devexpress.com/Demos/DXHotels/Content/Pictures/Lobby-4.jpg)\",\r\n  },\r\n  secondRoom: {\r\n    background:\r\n      \"url(https://js.devexpress.com/Demos/DXHotels/Content/Pictures/MeetingRoom-4.jpg)\",\r\n  },\r\n  thirdRoom: {\r\n    background:\r\n      \"url(https://js.devexpress.com/Demos/DXHotels/Content/Pictures/MeetingRoom-0.jpg)\",\r\n  },\r\n  header: {\r\n    height: \"260px\",\r\n    backgroundSize: \"cover\",\r\n  },\r\n  commandButton: {\r\n    backgroundColor: \"rgba(255,255,255,0.65)\",\r\n  },\r\n});\r\n\r\nconst getClassByLocation = (classes, location) => {\r\n  if (location === \"Room 1\") return classes.firstRoom;\r\n  if (location === \"Room 2\") return classes.secondRoom;\r\n  return classes.thirdRoom;\r\n};\r\n\r\nconst Header = withStyles(style, { name: \"Header\" })(\r\n  ({ children, appointmentData, classes, ...restProps }) => (\r\n    <AppointmentTooltip.Header\r\n      {...restProps}\r\n      className={classNames(\r\n        getClassByLocation(classes, appointmentData.location),\r\n        classes.header\r\n      )}\r\n      appointmentData={appointmentData}\r\n    >\r\n      <IconButton\r\n        /* eslint-disable-next-line no-alert */\r\n        onClick={() => alert(JSON.stringify(appointmentData))}\r\n        className={classes.commandButton}\r\n      >\r\n        <MoreIcon />\r\n      </IconButton>\r\n    </AppointmentTooltip.Header>\r\n  )\r\n);\r\n\r\nconst Content = withStyles(style, { name: \"Content\" })(\r\n  ({ children, appointmentData, classes, ...restProps }) => (\r\n    <AppointmentTooltip.Content\r\n      {...restProps}\r\n      appointmentData={appointmentData}\r\n    >\r\n      <Grid container alignItems=\"center\">\r\n        <Grid item xs={2} className={classes.textCenter}>\r\n          <Room className={classes.icon} />\r\n        </Grid>\r\n        <Grid item xs={10}>\r\n          {appointmentData.lol}\r\n        </Grid>\r\n      </Grid>\r\n    </AppointmentTooltip.Content>\r\n  )\r\n);\r\n\r\nconst CommandButton = withStyles(style, {\r\n  name: \"CommandButton\",\r\n})(({ classes, ...restProps }) => (\r\n  <AppointmentTooltip.CommandButton\r\n    {...restProps}\r\n    className={classes.commandButton}\r\n  />\r\n));\r\n\r\nexport default class CalendarScheduler extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: this.props.data,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n\r\n    return (\r\n      <Paper>\r\n        <Scheduler data={data} height=\"100%\">\r\n          <ViewState\r\n            defaultCurrentDate=\"2018-06-26\"\r\n            defaultCurrentViewName=\"Month\"\r\n          />\r\n          <DayView />\r\n          <WeekView />\r\n          <MonthView height=\"100%\"/>\r\n          <Toolbar />\r\n          <ViewSwitcher />\r\n          <DateNavigator />\r\n          <TodayButton />\r\n\r\n          <Appointments />\r\n\r\n          <AppointmentTooltip\r\n            headerComponent={Header}\r\n            contentComponent={Content}\r\n            commandButtonComponent={CommandButton}\r\n            showCloseButton\r\n          />\r\n        </Scheduler>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\n","E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\ProjectUsers.js",[],"E:\\university documents\\senior project-498\\CPIT-499\\project\\ezb0.2\\src\\Components\\Tabs\\ProjectSettings.js",[],{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":108,"column":9,"nodeType":"166","messageId":"167","endLine":108,"endColumn":13},{"ruleId":"164","severity":1,"message":"168","line":151,"column":9,"nodeType":"166","messageId":"167","endLine":151,"endColumn":22},{"ruleId":"164","severity":1,"message":"169","line":1,"column":17,"nodeType":"166","messageId":"167","endLine":1,"endColumn":25},{"ruleId":"164","severity":1,"message":"170","line":22,"column":8,"nodeType":"166","messageId":"167","endLine":22,"endColumn":17},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"no-unused-vars","'comp' is assigned a value but never used.","Identifier","unusedVar","'renderTooltip' is assigned a value but never used.","'useState' is defined but never used.","'PopUptask' is defined but never used.","no-global-assign","no-unsafe-negation"]